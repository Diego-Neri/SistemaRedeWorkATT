@model EstudanteModel
@{
    ViewData["Title"] = "Cadastro - Estudante";
}
<link rel="stylesheet" href="~/css/CadastroEstudante.css" asp-append-version="true" />
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/css/bootstrap.min.css">

<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastrar estudante - RedeWork</title>
    <link rel="stylesheet" href="style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@400&display=swap" rel="stylesheet">
</head>

<body class="bg-light">
    <div class="container mt-5">
        @if (TempData["MensagemErro"] != null) {
            <div class="alert alert-danger" role="alert">
                <button type="button" class="btn btn-danger btn-sm close-alert" arial-label"Close">X</button>
                @TempData["MensagemErro"]
            </div>
        }

        @if (TempData["MensagemSucesso"] != null) {
            <div class="alert alert-success" role="alert">
                <button type="button" class="btn btn-danger btn-sm close-alert" arial-label"Close">X</button>
                @TempData["MensagemSucesso"]
            </div>
        }
        <h2 class="text-center" style="color:#5D2CE7;">DADOS DO ESTUDANTE</h2>
        <p class="text-center">Segurança e Confidencialidade<br>A RedeWork garante a segurança e a confidencialidade de todos os dados pessoais introduzidos em meu cadastro.</p>

        <main>
            @using (Html.BeginForm("CadastroEstudante", "Cadastro", FormMethod.Post)) {
                <div class="form-group">
                    @Html.LabelFor(m => m.Nome)
                    @Html.TextBoxFor(m => m.Nome, new { @class = "form-control", @required = "required", placeholder = "Digite o seu nome" })
                    @Html.ValidationMessageFor(m => m.Nome, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Sobrenome)
                    @Html.TextBoxFor(m => m.Sobrenome, new { @class = "form-control", @required = "required", placeholder = "Digite o seu sobrenome" })
                    @Html.ValidationMessageFor(m => m.Sobrenome, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.CPF)
                    @Html.TextBoxFor(m => m.CPF, new { @class = "form-control", @required = "required", placeholder = "Digite o seu CPF" })
                    @Html.ValidationMessageFor(m => m.CPF, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(m => m.Sexo)
                    @Html.DropDownListFor(m => m.Sexo, new SelectList(new[]
                             {
                new SelectListItem { Value = "", Text = "Selecione" },
                new SelectListItem { Value = "M", Text = "Masculino" },
                new SelectListItem { Value = "F", Text = "Feminino" },
                new SelectListItem { Value = "?", Text = "Prefiro não informar" }
                }, "Value", "Text"), new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(m => m.Sexo, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Telefone)
                    @Html.TextBoxFor(m => m.Telefone, new { @class = "form-control", placeholder = "Digite o número do seu telefone", @required = "required" })
                    @Html.ValidationMessageFor(m => m.Telefone, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email)
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", type = "email", placeholder = "Digite o seu e-mail", @required = "required" })
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CEP)
                    @Html.TextBoxFor(model => model.CEP, new { @class = "form-control", @required = "required", placeholder = "Digite o seu CEP" })
                    @Html.ValidationMessageFor(m => m.CEP, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Rua)
                    @Html.TextBoxFor(model => model.Rua, new { @class = "form-control", @required = "required", placeholder = "Informe sua rua" })
                    @Html.ValidationMessageFor(m => m.Rua, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Numero)
                    @Html.TextBoxFor(model => model.Numero, new { @class = "form-control", @required = "required", placeholder = "Informe o número da rua" })
                    @Html.ValidationMessageFor(m => m.Numero, "", new { @class = "text-danger" })
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.Estado, "ESTADO")
                        @Html.DropDownListFor(m => m.Estado, new SelectList(new[]
                                 {
                    new { Value = "", Text = "Selecione" },
                    new { Value = "ac", Text = "Acre" },
                    new { Value = "al", Text = "Alagoas" },
                    new { Value = "ap", Text = "Amapá" },
                    new { Value = "am", Text = "Amazonas" },
                    new { Value = "ba", Text = "Bahia" },
                    new { Value = "ce", Text = "Ceará" },
                    new { Value = "df", Text = "Distrito Federal" },
                    new { Value = "es", Text = "Espírito Santo" },
                    new { Value = "go", Text = "Goiás" },
                    new { Value = "ma", Text = "Maranhão" },
                    new { Value = "mt", Text = "Mato Grosso" },
                    new { Value = "ms", Text = "Mato Grosso do Sul" },
                    new { Value = "mg", Text = "Minas Gerais" },
                    new { Value = "pa", Text = "Pará" },
                    new { Value = "pb", Text = "Paraíba" },
                    new { Value = "pr", Text = "Paraná" },
                    new { Value = "pe", Text = "Pernambuco" },
                    new { Value = "pi", Text = "Piauí" },
                    new { Value = "rj", Text = "Rio de Janeiro" },
                    new { Value = "rn", Text = "Rio Grande do Norte" },
                    new { Value = "rs", Text = "Rio Grande do Sul" },
                    new { Value = "ro", Text = "Rondônia" },
                    new { Value = "rr", Text = "Roraima" },
                    new { Value = "sc", Text = "Santa Catarina" },
                    new { Value = "sp", Text = "São Paulo" },
                    new { Value = "se", Text = "Sergipe" },
                    new { Value = "to", Text = "Tocantins" }

                    }, "Value", "Text"), new { @class = "form-control", @required = "required" })
                        @Html.ValidationMessageFor(m => m.Estado, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.Cidade, "CIDADE")
                        @Html.DropDownListFor(m => m.Cidade, new SelectList(new[]
                                 {
                    new { Value = "", Text = "Selecione" },
                    new { Value = "sao-paulo", Text = "São Paulo" },
                    new { Value = "campinas", Text = "Campinas" },
                    new { Value = "santos", Text = "Santos" },
                    new { Value = "ribeirao-preto", Text = "Ribeirão Preto" },
                    new { Value = "sao-jose-dos-campos", Text = "São José dos Campos" },
                    new { Value = "sorocaba", Text = "Sorocaba" },
                    new { Value = "jundiai", Text = "Jundiaí" },
                    new { Value = "piracicaba", Text = "Piracicaba" },
                    new { Value = "rio-de-janeiro", Text = "Rio de Janeiro" },
                    new { Value = "niteroi", Text = "Niterói" },
                    new { Value = "petropolis", Text = "Petrópolis" },
                    new { Value = "volta-redonda", Text = "Volta Redonda" },
                    new { Value = "nova-iguacu", Text = "Nova Iguaçu" },
                    new { Value = "duque-de-caxias", Text = "Duque de Caxias" },
                    new { Value = "campos-dos-goytacazes", Text = "Campos dos Goytacazes" },
                    new { Value = "belo-horizonte", Text = "Belo Horizonte" },
                    new { Value = "uberlandia", Text = "Uberlândia" },
                    new { Value = "juiz-de-fora", Text = "Juiz de Fora" },
                    new { Value = "contagem", Text = "Contagem" },
                    new { Value = "betim", Text = "Betim" },
                    new { Value = "montes-claros", Text = "Montes Claros" },
                    new { Value = "salvador", Text = "Salvador" },
                    new { Value = "feira-de-santana", Text = "Feira de Santana" },
                    new { Value = "vitoria-da-conquista", Text = "Vitória da Conquista" },
                    new { Value = "camaçari", Text = "Camaçari" },
                    new { Value = "juazeiro", Text = "Juazeiro" },
                    new { Value = "itabuna", Text = "Itabuna" },
                    new { Value = "curitiba", Text = "Curitiba" },
                    new { Value = "londrina", Text = "Londrina" },
                    new { Value = "maringa", Text = "Maringá" },
                    new { Value = "foz-do-iguacu", Text = "Foz do Iguaçu" },
                    new { Value = "ponta-grossa", Text = "Ponta Grossa" },
                    new { Value = "cascavel", Text = "Cascavel" },
                    new { Value = "porto-alegre", Text = "Porto Alegre" },
                    new { Value = "caxias-do-sul", Text = "Caxias do Sul" },
                    new { Value = "pelotas", Text = "Pelotas" },
                    new { Value = "santa-maria", Text = "Santa Maria" },
                    new { Value = "novo-hamburgo", Text = "Novo Hamburgo" },
                    new { Value = "passo-fundo", Text = "Passo Fundo" },
                    new { Value = "recife", Text = "Recife" },
                    new { Value = "olinda", Text = "Olinda" },
                    new { Value = "caruaru", Text = "Caruaru" },
                    new { Value = "petrolina", Text = "Petrolina" },
                    new { Value = "jaboatao-dos-guararapes", Text = "Jaboatão dos Guararapes" },
                    new { Value = "paulista", Text = "Paulista" },
                    new { Value = "maceio", Text = "Maceió" },
                    new { Value = "aracaju", Text = "Aracaju" },
                    new { Value = "teresina", Text = "Teresina" },
                    new { Value = "fortaleza", Text = "Fortaleza" },
                    new { Value = "vitoria", Text = "Vitória" },
                    new { Value = "belém", Text = "Belém" },
                    new { Value = "manaus", Text = "Manaus" },
                    new { Value = "boa-vista", Text = "Boa Vista" },
                    new { Value = "rio-branco", Text = "Rio Branco" },
                    new { Value = "palmas", Text = "Palmas" },
                    new { Value = "macapa", Text = "Macapá" },
                    new { Value = "salvador", Text = "Salvador" },
                    new { Value = "teresopolis", Text = "Teresópolis" },
                    new { Value = "petrópolis", Text = "Petrópolis" },
                    new { Value = "nova-friburgo", Text = "Nova Friburgo" },
                    new { Value = "volta-redonda", Text = "Volta Redonda" }
                    }, "Value", "Text"), htmlAttributes: new { @class = "form-control", @required = "required" })
                        @Html.ValidationMessageFor(m => m.Cidade, "", new { @class = "text-danger" })
                    </div>
                </div>

                <br />
                <br />
                <h4>INFORMAÇÕES ACADÊMICAS</h4>

                <div class="mb-3">
                    @Html.LabelFor(m => m.Instituicao, "Instituição")
                    @Html.DropDownListFor(m => m.Instituicao, new SelectList(new List<SelectListItem>
                {
                new SelectListItem { Value = "", Text = "Selecione" },
                new SelectListItem { Value = "universidade-federal", Text = "Universidade Federal" },
                new SelectListItem { Value = "universidade-estadual", Text = "Universidade Estadual" },
                new SelectListItem { Value = "universidade-privada", Text = "Universidade Privada" },
                new SelectListItem { Value = "centro-universitario", Text = "Centro Universitário" },
                new SelectListItem { Value = "faculdade-tecnica", Text = "Faculdade Técnica" },
                new SelectListItem { Value = "instituto-tecnologico", Text = "Instituto Tecnológico" }
                }, "Value", "Text"), htmlAttributes: new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(m => m.Instituicao, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.Periodo, "Período")
                    @Html.DropDownListFor(m => m.Periodo, new SelectList(new List<SelectListItem>
                {
                new SelectListItem { Value = "", Text = "Selecione" },
                new SelectListItem { Value = "integral", Text = "Integral" },
                new SelectListItem { Value = "noturno", Text = "Noturno" },
                new SelectListItem { Value = "semi-integral", Text = "Semi-Integral" },
                new SelectListItem { Value = "a-distancia", Text = "A Distância" }
                }, "Value", "Text"), htmlAttributes: new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(m => m.Periodo, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.Curso, new { @class = "form-label", style = "color:black" })
                    @Html.DropDownListFor(m => m.Curso, new SelectList(new List<SelectListItem>
                {
                new SelectListItem { Value = "", Text = "Selecione" },
                new SelectListItem { Value = "ciencias-da-computacao", Text = "Ciências da Computação" },
                new SelectListItem { Value = "engenharia-de-software", Text = "Engenharia de Software" },
                new SelectListItem { Value = "sistemas-de-informacao", Text = "Sistemas de Informação" },
                new SelectListItem { Value = "analise-e-desenvolvimento-de-sistemas", Text = "Análise e Desenvolvimento de Sistemas" },
                new SelectListItem { Value = "seguranca-da-informacao", Text = "Segurança da Informação" },
                new SelectListItem { Value = "redes-de-computadores", Text = "Redes de Computadores" },
                new SelectListItem { Value = "banco-de-dados", Text = "Banco de Dados" },
                new SelectListItem { Value = "ciencia-de-dados", Text = "Ciência de Dados" },
                new SelectListItem { Value = "inteligencia-artificial", Text = "Inteligência Artificial" },
                new SelectListItem { Value = "engenharia-de-computacao", Text = "Engenharia de Computação" },
                new SelectListItem { Value = "gestao-de-ti", Text = "Gestão de Tecnologia da Informação" },
                new SelectListItem { Value = "jogos-digitais", Text = "Jogos Digitais" },
                new SelectListItem { Value = "tecnologia-da-informacao", Text = "Tecnologia da Informação" },
                new SelectListItem { Value = "engenharia-eletronica", Text = "Engenharia Eletrônica" },
                new SelectListItem { Value = "engenharia-de-telecomunicacoes", Text = "Engenharia de Telecomunicações" },
                new SelectListItem { Value = "automacao-industrial", Text = "Automação Industrial" },
                new SelectListItem { Value = "robotica", Text = "Robótica" },
                new SelectListItem { Value = "mecatronica-industrial", Text = "Mecatrônica Industrial" },
                new SelectListItem { Value = "biotecnologia", Text = "Biotecnologia" },
                new SelectListItem { Value = "internet-das-coisas", Text = "Internet das Coisas (IoT)" },
                new SelectListItem { Value = "big-data", Text = "Big Data" },
                new SelectListItem { Value = "desenvolvimento-web", Text = "Desenvolvimento Web" },
                new SelectListItem { Value = "desenvolvimento-mobile", Text = "Desenvolvimento Mobile" },
                new SelectListItem { Value = "cloud-computing", Text = "Computação em Nuvem (Cloud Computing)" },
                new SelectListItem { Value = "realidade-virtual-e-aumentada", Text = "Realidade Virtual e Aumentada" },
                new SelectListItem { Value = "blockchain", Text = "Blockchain" },
                new SelectListItem { Value = "cybersecurity", Text = "Cibersegurança" },
                new SelectListItem { Value = "arquitetura-de-software", Text = "Arquitetura de Software" },
                new SelectListItem { Value = "devops", Text = "DevOps" },
                new SelectListItem { Value = "engenharia-de-dados", Text = "Engenharia de Dados" },
                new SelectListItem { Value = "testes-de-software", Text = "Testes de Software" },
                new SelectListItem { Value = "outras", Text = "Outras" }
                }, "Value", "Text"), htmlAttributes: new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(m => m.Curso, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.Semestre, new { @class = "form-label", style = "color:black" })
                    @Html.DropDownListFor(m => m.Semestre, new SelectList(new List<SelectListItem>
                {
                new SelectListItem { Value = "", Text = "Selecione" },
                new SelectListItem { Value = "1", Text = "1º Semestre" },
                new SelectListItem { Value = "2", Text = "2º Semestre" },
                new SelectListItem { Value = "3", Text = "3º Semestre" },
                new SelectListItem { Value = "4", Text = "4º Semestre" },
                new SelectListItem { Value = "5", Text = "5º Semestre" },
                new SelectListItem { Value = "6", Text = "6º Semestre" },
                new SelectListItem { Value = "7", Text = "7º Semestre" },
                new SelectListItem { Value = "8", Text = "8º Semestre" },
                new SelectListItem { Value = "9", Text = "9º Semestre" },
                new SelectListItem { Value = "10", Text = "10º Semestre" },
                new SelectListItem { Value = "outro", Text = "Outro" }
                }, "Value", "Text"), htmlAttributes: new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(m => m.Semestre, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.DataNascimento, "Data de Nascimento")
                    @Html.TextBoxFor(m => m.DataNascimento, "{0:yyyy-MM-dd}", new { @class = "form-control", @required = "required", placeholder = "Informe a sua data de nascimento", type = "date" })
                    @Html.ValidationMessageFor(m => m.DataNascimento, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.Senha)
                    @Html.PasswordFor(m => m.Senha, new { @class = "form-control", @required = "required", placeholder = "Informe sua senha" })
                    @Html.ValidationMessageFor(m => m.Senha, "", new { @class = "text-danger" })
                    <span id="senha-error" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.ConfirmarSenha, "Confirmar senha")
                    @Html.PasswordFor(m => m.ConfirmarSenha, new { @class = "form-control", @required = "required", placeholder = "Confirme a sua senha" })
                    @Html.ValidationMessageFor(m => m.ConfirmarSenha, "", new { @class = "text-danger" })
                    <span id="confirmarSenha-error" class="text-danger"></span>
                    <br />
                    <small class="form-text text-muted">Sua senha deve conter pelo menos 8 caracteres, incluindo números, letras e um caractere especial.</small>
                </div>


                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="aceito" required>
                    <label class="form-check-label" for="aceito">Eu aceito as Condições Legais e a Política de Privacidade.</label>
                </div>

                <button type="submit" class="btn btn-primary" id="submit-btn">CADASTRAR-SE</button>
                <p class="mt-3 text-center">Você é uma empresa? <a asp-action="CadastroEmpresa" asp-controller="Cadastro">Cadastre-se aqui.</a
                    ></p>
            }
        </main>

    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

</body>

</html>
<script>
    document.getElementById('CEP').addEventListener('blur', function () {
        var cep = this.value.replace(/\D/g, ''); // Remove caracteres não numéricos

        if (cep.length === 8) {
            var url = `https://viacep.com.br/ws/${cep}/json/`;

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    if (!("erro" in data)) {
                        document.getElementById('Rua').value = data.logradouro;
                    } else {
                        alert('CEP não encontrado.');
                    }
                })
                .catch(error => {
                    console.log('Erro ao buscar o CEP: ', error);
                    alert('Erro ao buscar o CEP. Tente novamente.');
                });
        } else {
            alert('Por favor, insira um CEP válido.');
        }
    });

    document.querySelector("#submit-btn").addEventListener("click", function (e) {
        var senha = document.querySelector("#Senha").value;
        var confirmarSenha = document.querySelector("#ConfirmarSenha").value;
        var senhaError = document.querySelector("#senha-error");
        var confirmarSenhaError = document.querySelector("#confirmarSenha-error");

        //Limpa a mensagem de erro
        senhaError.textContent = "";
        confirmarSenhaError.textContent = "";

        //Validacao de senha e confirmacao de senha 
        if (senha !== confirmarSenha) {
            e.preventDefault(); //impede o envio do formulario
            confirmarSenhaError.textContent = "As senhas não coincidem.";
        }

        //Validacao para verificar se a senha tem pelomenos 8 caracteres
        if (senha.length < 8) {
            e.preventDefault(); // Impede o envio do form
            confirmarSenhaError.textContent = "A senha deve conter no mínimo 8 caracteres.";
        }

    });

</script>
