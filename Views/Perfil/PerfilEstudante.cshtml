@model SistemaRedeWork.Models.EstudanteModel

@{
    ViewData["HideFooter"] = true;
    ViewData["HideNavBar"] = true;
}

@if (Model != null)
{
    <div class="container mt-5">

        @if (TempData["MensagemErro"] != null)
        {
            <div class="alert alert-danger" role="alert">
                <button type="button" class="btn btn-danger btn-sm close-alert" aria-label="Close" data-dismiss="alert">X</button>
                @TempData["MensagemErro"]
            </div>
        }

        @if (TempData["MensagemSucesso"] != null)
        {
            <div class="alert alert-success" role="alert">
                <button type="button" class="btn btn-success btn-sm close-alert" aria-label="Close" data-dismiss="alert">X</button>
                @TempData["MensagemSucesso"]
            </div>
        }

        <div class="mb-3">
            <a href="@Url.Action("EstudanteLogado", "Login", new { id = Model.Id })" class="btn btn-primary">
                Voltar
            </a>
        </div>

        @using (Html.BeginForm("AtualizarPerfil", "Perfil", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Id" />
            <h3 style="color: indigo">Atualizar Informações</h3>

            @foreach (var campo in new[] { "Nome", "Email", "Telefone", "CEP", "Rua", "Numero", "Sexo", "Estado" })
            {
                <div class="form-group">
                    <label>@campo:</label>
                    <div class="input-group">
                        <input class="form-control" type="text" value="@Model.GetType().GetProperty(campo).GetValue(Model)" disabled readonly />
                        <button type="button" class="btn btn-outline-secondary" onclick="showInput('@campo')">Alterar</button>
                    </div>
                    <input type="text" class="form-control d-none mt-2" id="@campo.ToLower()-input" name="@campo" value="@Model.GetType().GetProperty(campo).GetValue(Model)" />
                    <button type="submit" id="@campo.ToLower()-save" class="btn btn-primary d-none mt-2">Salvar</button>
                    <button type="button" id="@campo.ToLower()-cancel" class="btn btn-secondary d-none mt-2" onclick="cancelEdit('@campo')">Cancelar</button>
                </div>
            }

            <!-- Botão Atualizar -->
            <button type="submit" class="btn btn-success">Atualizar Perfil</button>
        }
    </div>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Quando o botão com a classe 'close-alert' for clicado
            $('.close-alert').click(function () {
                // Esconde o elemento pai (a div com a mensagem)
                $(this).closest('.alert').fadeOut();
            });
        });

        function showInput(field) {
            const inputField = document.getElementById(`${field.toLowerCase()}-input`);
            const saveButton = document.getElementById(`${field.toLowerCase()}-save`);
            const cancelButton = document.getElementById(`${field.toLowerCase()}-cancel`);
            const textField = inputField.previousElementSibling; // O campo anterior no DOM

            // Mostra o campo de entrada e o botão de salvar/cancelar
            inputField.classList.remove('d-none');
            saveButton.classList.remove('d-none');
            cancelButton.classList.remove('d-none');
            textField.classList.add('d-none');
            inputField.style.opacity = 0;
            setTimeout(() => inputField.style.opacity = 1, 100);  // Suaviza a transição
        }

        function cancelEdit(field) {
            const inputField = document.getElementById(`${field.toLowerCase()}-input`);
            const saveButton = document.getElementById(`${field.toLowerCase()}-save`);
            const cancelButton = document.getElementById(`${field.toLowerCase()}-cancel`);
            const textField = inputField.previousElementSibling; // O campo anterior no DOM

            // Esconde o campo de entrada e os botões de salvar/cancelar
            inputField.classList.add('d-none');
            saveButton.classList.add('d-none');
            cancelButton.classList.add('d-none');
            textField.classList.remove('d-none');
        }

        // Lida com o envio do formulário
        document.querySelector('form').addEventListener('submit', function (event) {
            // Mensagem de feedback
            document.getElementById("feedback").innerText = "Atualizações salvas com sucesso!";
        });
    </script>
}
