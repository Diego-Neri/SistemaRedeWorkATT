@model SistemaRedeWork.Models.AlterarSenhaModel // Certifique-se de que o namespace está correto
@{
    // Layout = "_LayoutDeslogado"; // Define o layout a ser usado
    ViewData["Title"] = "Alterar senha do usuário";
}

<div class="text-center">
    <h1 class="display-4">Alterar senha do usuário</h1>
</div>

@if (TempData["MensagemSucesso"] != null) {
    <div class="alert alert-success" role="alert">
        <button type="button" class="btn btn-danger btn-sm close-alert" aria-label="Close">X</button>
        @TempData["MensagemSucesso"]
    </div>
}

@if (TempData["MensagemErro"] != null) {
    <div class="alert alert-danger" role="alert">
        <button type="button" class="btn btn-danger btn-sm close-alert" aria-label="Close">X</button>
        @TempData["MensagemErro"]
    </div>
}

<form asp-controller="AlterarSenha" asp-action="Alterar" method="post">
    <div class="form-group">
        <label for="senhaAtual">Senha Atual</label>
        <input type="password" asp-for="SenhaAtual" class="form-control" placeholder="Digite a senha atual do usuário" required>
        @Html.ValidationMessageFor(x => x.SenhaAtual)
    </div>

    <div class="form-group">
        <label for="novaSenha">Nova senha</label>
        <input type="password" asp-for="NovaSenha" class="form-control" placeholder="Digite a nova senha do usuário" required>
        @Html.ValidationMessageFor(x => x.NovaSenha)
    </div>

    <div class="form-group">
        <label for="confirmarSenha">Confirmar nova senha</label>
        <input type="password" asp-for="ConfirmarNovaSenha" class="form-control" placeholder="Digite a confirmação da nova senha do usuário" required>
        @Html.ValidationMessageFor(x => x.ConfirmarNovaSenha)
    </div>

    <br />

    <button type="submit" class="btn btn-primary">Alterar</button>
    <a class="btn btn-secondary" asp-controller="Home" asp-action="Index" role="button">Voltar</a>
</form>
